'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.269
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


Partial Public Class juthawonga
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertStudent(instance As Student)
    End Sub
  Partial Private Sub UpdateStudent(instance As Student)
    End Sub
  Partial Private Sub DeleteStudent(instance As Student)
    End Sub
  Partial Private Sub InsertMain(instance As Main)
    End Sub
  Partial Private Sub UpdateMain(instance As Main)
    End Sub
  Partial Private Sub DeleteMain(instance As Main)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Ampare_Pichaya.MySettings.Default.juthawongConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Students() As System.Data.Linq.Table(Of Student)
		Get
			Return Me.GetTable(Of Student)
		End Get
	End Property
	
	Public ReadOnly Property Mains() As System.Data.Linq.Table(Of Main)
		Get
			Return Me.GetTable(Of Main)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Student")>  _
Partial Public Class Student
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SID As String
	
	Private _FullName As String
	
	Private _IDCard As String
	
	Private _Sex As String
	
	Private _Religious As String
	
	Private _Nationality As String
	
	Private _Note As String
	
	Private _Room As String
	
	Private _IsLeave As String
	
	Private _Grade As String
	
	Private _Access_By As String
	
	Private _Birthdate As String
	
	Private _PichayaDate As String
	
	Private _IntialID As String
	
	Private _Mains As EntitySet(Of Main)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSIDChanging(value As String)
    End Sub
    Partial Private Sub OnSIDChanged()
    End Sub
    Partial Private Sub OnFullNameChanging(value As String)
    End Sub
    Partial Private Sub OnFullNameChanged()
    End Sub
    Partial Private Sub OnIDCardChanging(value As String)
    End Sub
    Partial Private Sub OnIDCardChanged()
    End Sub
    Partial Private Sub OnSexChanging(value As String)
    End Sub
    Partial Private Sub OnSexChanged()
    End Sub
    Partial Private Sub OnReligiousChanging(value As String)
    End Sub
    Partial Private Sub OnReligiousChanged()
    End Sub
    Partial Private Sub OnNationalityChanging(value As String)
    End Sub
    Partial Private Sub OnNationalityChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnRoomChanging(value As String)
    End Sub
    Partial Private Sub OnRoomChanged()
    End Sub
    Partial Private Sub OnIsLeaveChanging(value As String)
    End Sub
    Partial Private Sub OnIsLeaveChanged()
    End Sub
    Partial Private Sub OnGradeChanging(value As String)
    End Sub
    Partial Private Sub OnGradeChanged()
    End Sub
    Partial Private Sub OnAccess_ByChanging(value As String)
    End Sub
    Partial Private Sub OnAccess_ByChanged()
    End Sub
    Partial Private Sub OnBirthdateChanging(value As String)
    End Sub
    Partial Private Sub OnBirthdateChanged()
    End Sub
    Partial Private Sub OnPichayaDateChanging(value As String)
    End Sub
    Partial Private Sub OnPichayaDateChanged()
    End Sub
    Partial Private Sub OnIntialIDChanging(value As String)
    End Sub
    Partial Private Sub OnIntialIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Mains = New EntitySet(Of Main)(AddressOf Me.attach_Mains, AddressOf Me.detach_Mains)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SID", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property SID() As String
		Get
			Return Me._SID
		End Get
		Set
			If (String.Equals(Me._SID, value) = false) Then
				Me.OnSIDChanging(value)
				Me.SendPropertyChanging
				Me._SID = value
				Me.SendPropertyChanged("SID")
				Me.OnSIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", CanBeNull:=false)>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me.OnFullNameChanging(value)
				Me.SendPropertyChanging
				Me._FullName = value
				Me.SendPropertyChanged("FullName")
				Me.OnFullNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDCard", CanBeNull:=false)>  _
	Public Property IDCard() As String
		Get
			Return Me._IDCard
		End Get
		Set
			If (String.Equals(Me._IDCard, value) = false) Then
				Me.OnIDCardChanging(value)
				Me.SendPropertyChanging
				Me._IDCard = value
				Me.SendPropertyChanged("IDCard")
				Me.OnIDCardChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sex", CanBeNull:=false)>  _
	Public Property Sex() As String
		Get
			Return Me._Sex
		End Get
		Set
			If (String.Equals(Me._Sex, value) = false) Then
				Me.OnSexChanging(value)
				Me.SendPropertyChanging
				Me._Sex = value
				Me.SendPropertyChanged("Sex")
				Me.OnSexChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Religious", CanBeNull:=false)>  _
	Public Property Religious() As String
		Get
			Return Me._Religious
		End Get
		Set
			If (String.Equals(Me._Religious, value) = false) Then
				Me.OnReligiousChanging(value)
				Me.SendPropertyChanging
				Me._Religious = value
				Me.SendPropertyChanged("Religious")
				Me.OnReligiousChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nationality", CanBeNull:=false)>  _
	Public Property Nationality() As String
		Get
			Return Me._Nationality
		End Get
		Set
			If (String.Equals(Me._Nationality, value) = false) Then
				Me.OnNationalityChanging(value)
				Me.SendPropertyChanging
				Me._Nationality = value
				Me.SendPropertyChanged("Nationality")
				Me.OnNationalityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Note", CanBeNull:=false)>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room", CanBeNull:=false)>  _
	Public Property Room() As String
		Get
			Return Me._Room
		End Get
		Set
			If (String.Equals(Me._Room, value) = false) Then
				Me.OnRoomChanging(value)
				Me.SendPropertyChanging
				Me._Room = value
				Me.SendPropertyChanged("Room")
				Me.OnRoomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsLeave", CanBeNull:=false)>  _
	Public Property IsLeave() As String
		Get
			Return Me._IsLeave
		End Get
		Set
			If (String.Equals(Me._IsLeave, value) = false) Then
				Me.OnIsLeaveChanging(value)
				Me.SendPropertyChanging
				Me._IsLeave = value
				Me.SendPropertyChanged("IsLeave")
				Me.OnIsLeaveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Grade", CanBeNull:=false)>  _
	Public Property Grade() As String
		Get
			Return Me._Grade
		End Get
		Set
			If (String.Equals(Me._Grade, value) = false) Then
				Me.OnGradeChanging(value)
				Me.SendPropertyChanging
				Me._Grade = value
				Me.SendPropertyChanged("Grade")
				Me.OnGradeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Access_By", CanBeNull:=false)>  _
	Public Property Access_By() As String
		Get
			Return Me._Access_By
		End Get
		Set
			If (String.Equals(Me._Access_By, value) = false) Then
				Me.OnAccess_ByChanging(value)
				Me.SendPropertyChanging
				Me._Access_By = value
				Me.SendPropertyChanged("Access_By")
				Me.OnAccess_ByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Birthdate", CanBeNull:=false)>  _
	Public Property Birthdate() As String
		Get
			Return Me._Birthdate
		End Get
		Set
			If (String.Equals(Me._Birthdate, value) = false) Then
				Me.OnBirthdateChanging(value)
				Me.SendPropertyChanging
				Me._Birthdate = value
				Me.SendPropertyChanged("Birthdate")
				Me.OnBirthdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PichayaDate", CanBeNull:=false)>  _
	Public Property PichayaDate() As String
		Get
			Return Me._PichayaDate
		End Get
		Set
			If (String.Equals(Me._PichayaDate, value) = false) Then
				Me.OnPichayaDateChanging(value)
				Me.SendPropertyChanging
				Me._PichayaDate = value
				Me.SendPropertyChanged("PichayaDate")
				Me.OnPichayaDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IntialID", CanBeNull:=false)>  _
	Public Property IntialID() As String
		Get
			Return Me._IntialID
		End Get
		Set
			If (String.Equals(Me._IntialID, value) = false) Then
				Me.OnIntialIDChanging(value)
				Me.SendPropertyChanging
				Me._IntialID = value
				Me.SendPropertyChanged("IntialID")
				Me.OnIntialIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_Main", Storage:="_Mains", ThisKey:="SID", OtherKey:="SID")>  _
	Public Property Mains() As EntitySet(Of Main)
		Get
			Return Me._Mains
		End Get
		Set
			Me._Mains.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Mains(ByVal entity As Main)
		Me.SendPropertyChanging
		entity.Student = Me
	End Sub
	
	Private Sub detach_Mains(ByVal entity As Main)
		Me.SendPropertyChanging
		entity.Student = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class Main
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Main As String
	
	Private _SID As String
	
	Private _Student As EntityRef(Of Student)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMainChanging(value As String)
    End Sub
    Partial Private Sub OnMainChanged()
    End Sub
    Partial Private Sub OnSIDChanging(value As String)
    End Sub
    Partial Private Sub OnSIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Student = CType(Nothing, EntityRef(Of Student))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Main", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Main() As String
		Get
			Return Me._Main
		End Get
		Set
			If (String.Equals(Me._Main, value) = false) Then
				Me.OnMainChanging(value)
				Me.SendPropertyChanging
				Me._Main = value
				Me.SendPropertyChanged("Main")
				Me.OnMainChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SID", CanBeNull:=false)>  _
	Public Property SID() As String
		Get
			Return Me._SID
		End Get
		Set
			If (String.Equals(Me._SID, value) = false) Then
				If Me._Student.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSIDChanging(value)
				Me.SendPropertyChanging
				Me._SID = value
				Me.SendPropertyChanged("SID")
				Me.OnSIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_Main", Storage:="_Student", ThisKey:="SID", OtherKey:="SID", IsForeignKey:=true)>  _
	Public Property Student() As Student
		Get
			Return Me._Student.Entity
		End Get
		Set
			Dim previousValue As Student = Me._Student.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Student.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Student.Entity = Nothing
					previousValue.Mains.Remove(Me)
				End If
				Me._Student.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Mains.Add(Me)
					Me._SID = value.SID
				Else
					Me._SID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Student")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
